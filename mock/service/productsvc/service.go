// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockproductsvc

import (
	"context"
	"gin-swagger-api/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// CreateProduct provides a mock function for the type MockService
func (_mock *MockService) CreateProduct(ctx context.Context, name string, description string, price float64, stock int) (*domain.Product, error) {
	ret := _mock.Called(ctx, name, description, price, stock)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *domain.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, float64, int) (*domain.Product, error)); ok {
		return returnFunc(ctx, name, description, price, stock)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, float64, int) *domain.Product); ok {
		r0 = returnFunc(ctx, name, description, price, stock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, float64, int) error); ok {
		r1 = returnFunc(ctx, name, description, price, stock)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type MockService_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - description string
//   - price float64
//   - stock int
func (_e *MockService_Expecter) CreateProduct(ctx interface{}, name interface{}, description interface{}, price interface{}, stock interface{}) *MockService_CreateProduct_Call {
	return &MockService_CreateProduct_Call{Call: _e.mock.On("CreateProduct", ctx, name, description, price, stock)}
}

func (_c *MockService_CreateProduct_Call) Run(run func(ctx context.Context, name string, description string, price float64, stock int)) *MockService_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 float64
		if args[3] != nil {
			arg3 = args[3].(float64)
		}
		var arg4 int
		if args[4] != nil {
			arg4 = args[4].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
		)
	})
	return _c
}

func (_c *MockService_CreateProduct_Call) Return(product *domain.Product, err error) *MockService_CreateProduct_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockService_CreateProduct_Call) RunAndReturn(run func(ctx context.Context, name string, description string, price float64, stock int) (*domain.Product, error)) *MockService_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProduct provides a mock function for the type MockService
func (_mock *MockService) DeleteProduct(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_DeleteProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProduct'
type MockService_DeleteProduct_Call struct {
	*mock.Call
}

// DeleteProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockService_Expecter) DeleteProduct(ctx interface{}, id interface{}) *MockService_DeleteProduct_Call {
	return &MockService_DeleteProduct_Call{Call: _e.mock.On("DeleteProduct", ctx, id)}
}

func (_c *MockService_DeleteProduct_Call) Run(run func(ctx context.Context, id string)) *MockService_DeleteProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_DeleteProduct_Call) Return(err error) *MockService_DeleteProduct_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_DeleteProduct_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockService_DeleteProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProduct provides a mock function for the type MockService
func (_mock *MockService) GetProduct(ctx context.Context, id string) (*domain.Product, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProduct")
	}

	var r0 *domain.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.Product, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.Product); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_GetProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProduct'
type MockService_GetProduct_Call struct {
	*mock.Call
}

// GetProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockService_Expecter) GetProduct(ctx interface{}, id interface{}) *MockService_GetProduct_Call {
	return &MockService_GetProduct_Call{Call: _e.mock.On("GetProduct", ctx, id)}
}

func (_c *MockService_GetProduct_Call) Run(run func(ctx context.Context, id string)) *MockService_GetProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_GetProduct_Call) Return(product *domain.Product, err error) *MockService_GetProduct_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockService_GetProduct_Call) RunAndReturn(run func(ctx context.Context, id string) (*domain.Product, error)) *MockService_GetProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetProducts provides a mock function for the type MockService
func (_mock *MockService) GetProducts(ctx context.Context) ([]domain.Product, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetProducts")
	}

	var r0 []domain.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.Product, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.Product); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_GetProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProducts'
type MockService_GetProducts_Call struct {
	*mock.Call
}

// GetProducts is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) GetProducts(ctx interface{}) *MockService_GetProducts_Call {
	return &MockService_GetProducts_Call{Call: _e.mock.On("GetProducts", ctx)}
}

func (_c *MockService_GetProducts_Call) Run(run func(ctx context.Context)) *MockService_GetProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_GetProducts_Call) Return(products []domain.Product, err error) *MockService_GetProducts_Call {
	_c.Call.Return(products, err)
	return _c
}

func (_c *MockService_GetProducts_Call) RunAndReturn(run func(ctx context.Context) ([]domain.Product, error)) *MockService_GetProducts_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProduct provides a mock function for the type MockService
func (_mock *MockService) UpdateProduct(ctx context.Context, id string, name string, description string, price float64, stock int) (*domain.Product, error) {
	ret := _mock.Called(ctx, id, name, description, price, stock)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 *domain.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, float64, int) (*domain.Product, error)); ok {
		return returnFunc(ctx, id, name, description, price, stock)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, string, string, float64, int) *domain.Product); ok {
		r0 = returnFunc(ctx, id, name, description, price, stock)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, string, string, float64, int) error); ok {
		r1 = returnFunc(ctx, id, name, description, price, stock)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_UpdateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProduct'
type MockService_UpdateProduct_Call struct {
	*mock.Call
}

// UpdateProduct is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - name string
//   - description string
//   - price float64
//   - stock int
func (_e *MockService_Expecter) UpdateProduct(ctx interface{}, id interface{}, name interface{}, description interface{}, price interface{}, stock interface{}) *MockService_UpdateProduct_Call {
	return &MockService_UpdateProduct_Call{Call: _e.mock.On("UpdateProduct", ctx, id, name, description, price, stock)}
}

func (_c *MockService_UpdateProduct_Call) Run(run func(ctx context.Context, id string, name string, description string, price float64, stock int)) *MockService_UpdateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		var arg4 float64
		if args[4] != nil {
			arg4 = args[4].(float64)
		}
		var arg5 int
		if args[5] != nil {
			arg5 = args[5].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockService_UpdateProduct_Call) Return(product *domain.Product, err error) *MockService_UpdateProduct_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockService_UpdateProduct_Call) RunAndReturn(run func(ctx context.Context, id string, name string, description string, price float64, stock int) (*domain.Product, error)) *MockService_UpdateProduct_Call {
	_c.Call.Return(run)
	return _c
}
