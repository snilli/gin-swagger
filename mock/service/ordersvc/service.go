// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mockordersvc

import (
	"context"
	"gin-swagger-api/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// CreateOrder provides a mock function for the type MockService
func (_mock *MockService) CreateOrder(ctx context.Context, userID int, productID int, quantity int, totalPrice float64, status string) (*domain.Order, error) {
	ret := _mock.Called(ctx, userID, productID, quantity, totalPrice, status)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 *domain.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, int, float64, string) (*domain.Order, error)); ok {
		return returnFunc(ctx, userID, productID, quantity, totalPrice, status)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int, int, int, float64, string) *domain.Order); ok {
		r0 = returnFunc(ctx, userID, productID, quantity, totalPrice, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int, int, int, float64, string) error); ok {
		r1 = returnFunc(ctx, userID, productID, quantity, totalPrice, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_CreateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateOrder'
type MockService_CreateOrder_Call struct {
	*mock.Call
}

// CreateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int
//   - productID int
//   - quantity int
//   - totalPrice float64
//   - status string
func (_e *MockService_Expecter) CreateOrder(ctx interface{}, userID interface{}, productID interface{}, quantity interface{}, totalPrice interface{}, status interface{}) *MockService_CreateOrder_Call {
	return &MockService_CreateOrder_Call{Call: _e.mock.On("CreateOrder", ctx, userID, productID, quantity, totalPrice, status)}
}

func (_c *MockService_CreateOrder_Call) Run(run func(ctx context.Context, userID int, productID int, quantity int, totalPrice float64, status string)) *MockService_CreateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 float64
		if args[4] != nil {
			arg4 = args[4].(float64)
		}
		var arg5 string
		if args[5] != nil {
			arg5 = args[5].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
		)
	})
	return _c
}

func (_c *MockService_CreateOrder_Call) Return(order *domain.Order, err error) *MockService_CreateOrder_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockService_CreateOrder_Call) RunAndReturn(run func(ctx context.Context, userID int, productID int, quantity int, totalPrice float64, status string) (*domain.Order, error)) *MockService_CreateOrder_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteOrder provides a mock function for the type MockService
func (_mock *MockService) DeleteOrder(ctx context.Context, id string) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrder")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockService_DeleteOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOrder'
type MockService_DeleteOrder_Call struct {
	*mock.Call
}

// DeleteOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockService_Expecter) DeleteOrder(ctx interface{}, id interface{}) *MockService_DeleteOrder_Call {
	return &MockService_DeleteOrder_Call{Call: _e.mock.On("DeleteOrder", ctx, id)}
}

func (_c *MockService_DeleteOrder_Call) Run(run func(ctx context.Context, id string)) *MockService_DeleteOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_DeleteOrder_Call) Return(err error) *MockService_DeleteOrder_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockService_DeleteOrder_Call) RunAndReturn(run func(ctx context.Context, id string) error) *MockService_DeleteOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrder provides a mock function for the type MockService
func (_mock *MockService) GetOrder(ctx context.Context, id string) (*domain.Order, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 *domain.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*domain.Order, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *domain.Order); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_GetOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrder'
type MockService_GetOrder_Call struct {
	*mock.Call
}

// GetOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockService_Expecter) GetOrder(ctx interface{}, id interface{}) *MockService_GetOrder_Call {
	return &MockService_GetOrder_Call{Call: _e.mock.On("GetOrder", ctx, id)}
}

func (_c *MockService_GetOrder_Call) Run(run func(ctx context.Context, id string)) *MockService_GetOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockService_GetOrder_Call) Return(order *domain.Order, err error) *MockService_GetOrder_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockService_GetOrder_Call) RunAndReturn(run func(ctx context.Context, id string) (*domain.Order, error)) *MockService_GetOrder_Call {
	_c.Call.Return(run)
	return _c
}

// GetOrders provides a mock function for the type MockService
func (_mock *MockService) GetOrders(ctx context.Context) ([]domain.Order, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetOrders")
	}

	var r0 []domain.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]domain.Order, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []domain.Order); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_GetOrders_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOrders'
type MockService_GetOrders_Call struct {
	*mock.Call
}

// GetOrders is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockService_Expecter) GetOrders(ctx interface{}) *MockService_GetOrders_Call {
	return &MockService_GetOrders_Call{Call: _e.mock.On("GetOrders", ctx)}
}

func (_c *MockService_GetOrders_Call) Run(run func(ctx context.Context)) *MockService_GetOrders_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockService_GetOrders_Call) Return(orders []domain.Order, err error) *MockService_GetOrders_Call {
	_c.Call.Return(orders, err)
	return _c
}

func (_c *MockService_GetOrders_Call) RunAndReturn(run func(ctx context.Context) ([]domain.Order, error)) *MockService_GetOrders_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateOrder provides a mock function for the type MockService
func (_mock *MockService) UpdateOrder(ctx context.Context, id string, userID int, productID int, quantity int, totalPrice float64, status string) (*domain.Order, error) {
	ret := _mock.Called(ctx, id, userID, productID, quantity, totalPrice, status)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrder")
	}

	var r0 *domain.Order
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int, int, float64, string) (*domain.Order, error)); ok {
		return returnFunc(ctx, id, userID, productID, quantity, totalPrice, status)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string, int, int, int, float64, string) *domain.Order); ok {
		r0 = returnFunc(ctx, id, userID, productID, quantity, totalPrice, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Order)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string, int, int, int, float64, string) error); ok {
		r1 = returnFunc(ctx, id, userID, productID, quantity, totalPrice, status)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockService_UpdateOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateOrder'
type MockService_UpdateOrder_Call struct {
	*mock.Call
}

// UpdateOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - userID int
//   - productID int
//   - quantity int
//   - totalPrice float64
//   - status string
func (_e *MockService_Expecter) UpdateOrder(ctx interface{}, id interface{}, userID interface{}, productID interface{}, quantity interface{}, totalPrice interface{}, status interface{}) *MockService_UpdateOrder_Call {
	return &MockService_UpdateOrder_Call{Call: _e.mock.On("UpdateOrder", ctx, id, userID, productID, quantity, totalPrice, status)}
}

func (_c *MockService_UpdateOrder_Call) Run(run func(ctx context.Context, id string, userID int, productID int, quantity int, totalPrice float64, status string)) *MockService_UpdateOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 int
		if args[3] != nil {
			arg3 = args[3].(int)
		}
		var arg4 int
		if args[4] != nil {
			arg4 = args[4].(int)
		}
		var arg5 float64
		if args[5] != nil {
			arg5 = args[5].(float64)
		}
		var arg6 string
		if args[6] != nil {
			arg6 = args[6].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4,
			arg5,
			arg6,
		)
	})
	return _c
}

func (_c *MockService_UpdateOrder_Call) Return(order *domain.Order, err error) *MockService_UpdateOrder_Call {
	_c.Call.Return(order, err)
	return _c
}

func (_c *MockService_UpdateOrder_Call) RunAndReturn(run func(ctx context.Context, id string, userID int, productID int, quantity int, totalPrice float64, status string) (*domain.Order, error)) *MockService_UpdateOrder_Call {
	_c.Call.Return(run)
	return _c
}
